import config
import logging
from keyboard import *
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Command, Text
from aiogram import Bot, Dispatcher, executor, types
import psycopg2
from config import *


data = []
data_dump = []
connection = psycopg2.connect(
        host=host,
        user=user,
        password=password,
        database=db_name
    )

connection.autocommit = True

def db_table_val(user_id: int, user_name: str, user_surname: str, username: str):
    with connection.cursor() as cursor:
        postgres_insert_query =""" INSERT INTO users (user_id, user_name, user_surname, username)
                                           VALUES (%s,%s,%s,%s)"""
        record_to_insert = (user_id, user_name, user_surname, username)
        cursor.execute(postgres_insert_query, record_to_insert)

def db_table(user_id: int, nickname: str, age: int, citizenship: str, growth: int, weight: int, foot: str, club: str, contarct: bool, role: str, history: str, statistic: str, test: str, video: str, contact: str):
    with connection.cursor() as cursor:
        postgres_insert_query =""" INSERT INTO data (user_id, username, age, citizenship, growth, weight, foot, club, contract, role, history, statistic, test, video, contact)
                                           VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"""
        record_to_insert = (user_id, nickname, age, citizenship, growth, weight, foot, club, contarct, role, history, statistic, test, video, contact)
        cursor.execute(postgres_insert_query, record_to_insert)

def dump_db(user_n):
    with connection.cursor() as cursor:
        postgresql_select_query = "SELECT * FROM data WHERE username = %s"
        cursor.execute(postgresql_select_query, (user_n,))
        result_n = cursor.fetchall()
        return result_n

def dump_by_id(user_i):
    with connection.cursor() as cursor:
        postgresql_select_query = "SELECT * FROM data WHERE id = %s"
        cursor.execute(postgresql_select_query, (user_i,))
        result_i = cursor.fetchall()
        return result_i

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.TOKENN)
dp = Dispatcher(bot)

@dp.message_handler(commands = ["start"])
async def privet(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã")
    await message.answer("/go - –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ\n /help - –ø–æ–º–æ—â—å \n/clear - –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ \n/del - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª–µ \n/hp - –ø–æ–º–æ—â—å –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö")


@dp.message_handler(commands=["help"])
async def help(message: types.Message):
    await message.answer(f"–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? \n/go - –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ \n/clear - –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ \n/del - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª–µ \n/hp - –ø–æ–º–æ—â—å –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö" )

@dp.message_handler(commands=["go"])
async def go(message: types.Message):
    if len(data) == 0:
        await message.answer("–¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º", reply_markup=button)

        us_id = message.from_user.id
        us_name = message.from_user.first_name
        us_sname = message.from_user.last_name
        username = message.from_user.username


        db_table_val(user_id=us_id, user_name=us_name, user_surname=us_sname, username=username)
        await bot.send_message(-703593824, f"{us_id}, {us_name}, {us_sname}, {username}")
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Å –±–æ—Ç–æ–º —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É.")

@dp.message_handler(commands=["dumpadminall"])
async def dump_all(message: types.Message):
    print("data")
    with connection.cursor() as cursor:
        cursor.execute(
            """SELECT * FROM data"""
        )
        data_from_db = cursor.fetchall()
        for row in data_from_db:
            await message.answer(f"{row}")

@dp.message_handler(commands=["dumpadminnick"])
async def dump_nick(message: types.Message):
    data_dump.append("1")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫")

@dp.message_handler(commands=["dumpadminid"])
async def dump_id(message: types.Message):
    data_dump.append("2")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ id")


@dp.message_handler(commands=["OK"])
async def nick_name(message: types.Message):
    await message.answer("–ü–æ–µ—Ö–∞–ª–∏!", reply_markup=ReplyKeyboardRemove())
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫")

@dp.message_handler(Text(equals=["–í–°–Å"]))
async def f_finish(message: types.Message):
    await message.answer("Ok", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ó–∞–≤–µ—Ä—à–∏—Ç—å?", reply_markup=finish)

@dp.message_handler(Text(equals=["–ó–∞–≤–µ—Ä—à–∏—Ç—å"]))
async def oo(message: types.Message):
    await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!", reply_markup=ReplyKeyboardRemove())

    if data[7] == "–î–∞":
        data[7] = True
    elif data[7] == "–ù–µ—Ç":
        data[7] = False
    #await message.answer(f"{data}")
    if len(data) == 14:

        us_id = message.from_user.id
        us_name = message.from_user.first_name
        us_sname = message.from_user.last_name
        username = message.from_user.username

        print(data)

        try:
            db_table(us_id, data[0], int(data[1]), data[2], int(data[3]), int(data[4]), data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13])
            await bot.send_message(-703593824, f"–ë–æ—Ç –∑–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É —Å {us_id}, {us_name}, {us_sname}, {username}")
            await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!")
        except:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'.")

    else:
        await message.answer("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /go.")

    data.clear()

@dp.message_handler(Text(equals=["–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"]))
async def f_restart(message: types.Message):
    data.clear()
    await message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã{data}", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(commands=["end"])
async def end(message: types.Message):
    data.clear()

    await message.answer("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É")

@dp.message_handler(commands=["del"])
async def dell(message: types.Message):
    try:
        data.pop()
    except:
        pass

    if len(data) == 0:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫")
    elif len(data) == 1:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
    elif len(data) == 2:
        await message.answer("–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ")
    elif len(data) == 3:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç")
    elif len(data) == 4:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å")
    elif len(data) == 5:
        await message.answer("–í–∞—à–∞ —Ä–∞–±–æ—á–∞—è –Ω–æ–≥–∞", reply_markup=foot)
    elif len(data) == 6:
        await message.answer("–ó–∞ –∫–∞–∫–æ–π –∫–ª—É–± –≤—ã –∏–≥—Ä–∞–µ—Ç–µ?")
    elif len(data) == 7:
        await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç?", reply_markup=contract)
    elif len(data) == 8:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é.", reply_markup=position)
    elif len(data) == 9:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ")
    elif len(data) == 10:
        await message.answer("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    elif len(data) == 11:
        await message.answer("–¢–µ—Å—Ç—ã:")
    elif len(data) == 12:
        await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –≤–∏–¥–µ–æ")
    elif len(data) == 13:
        await message.answer("–í–∏–¥ —Å–≤—è–∑–∏:")
    elif len(data) == 14:
        await message.answer("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ üëáüëáüëá", reply_markup=contact)

@dp.message_handler(commands=["hp"])
async def helper(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ. –°—Å—ã–ª–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.")

@dp.message_handler(commands=["clear"])
async def cl(message: types.Message):
    data.clear()
    await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())


@dp.message_handler()
async def i(message: types.Message):
    us_id = message.from_user.id

    print(*data)

    await message.answer("–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", reply_markup=ReplyKeyboardRemove())

    if data_dump == []:
        data.append(message.text)
        if len(data) == 0:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫")
        elif len(data) == 1:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
        elif len(data) == 2:
            await message.answer("–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ")
        elif len(data) == 3:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç")
        elif len(data) == 4:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å")
        elif len(data) == 5:
            await message.answer("–í–∞—à–∞ —Ä–∞–±–æ—á–∞—è –Ω–æ–≥–∞", reply_markup=foot)
        elif len(data) == 6:
            await message.answer("–ó–∞ –∫–∞–∫–æ–π –∫–ª—É–± –≤—ã –∏–≥—Ä–∞–µ—Ç–µ?")
        elif len(data) == 7:
            await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç?", reply_markup=contract)
        elif len(data) == 8:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é.", reply_markup=position)
        elif len(data) == 9:
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ")
        elif len(data) == 10:
            await message.answer("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        elif len(data) == 11:
            await message.answer("–¢–µ—Å—Ç—ã:")
        elif len(data) == 12:
            await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –≤–∏–¥–µ–æ")
        elif len(data) == 13:
            await message.answer("–í–∏–¥ —Å–≤—è–∑–∏:")
        elif len(data) == 14:
            await message.answer("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ üëáüëáüëá", reply_markup=contact)
    else:
        if data_dump[0] == "1":
            mes = dump_db(message.text)
            await message.answer(f"{mes}")
        elif data_dump[0] == "2":
            mes = dump_by_id(int(message.text))
            await message.answer(f"{mes}")
        data_dump.clear()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)